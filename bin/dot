#!/bin/bash
#
# dot - Enhanced dotfiles management system
#
# Handles installation, updates, and configuration for different platforms and environments
# Supports auto-detection and interactive configuration

set -e

# Get script directories
parentDirectory="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
dotfilesDirectory="$(cd "$(dirname "$parentDirectory")" && pwd -P)"
configFile="$dotfilesDirectory/.dotconfig"

# Color output functions
source "$dotfilesDirectory/script/common/log.sh"

# Configuration defaults
DEFAULT_NAME="Jordan Garcia"
DEFAULT_EMAIL_PERSONAL="arickho@gmail.com"
DEFAULT_EMAIL_WORK="jordan.arickhogarcia@labcorp.com"

detect_system() {
	local os_name=""
	local distro=""

	if [[ "$OSTYPE" == "darwin"* ]]; then
		os_name="mac"
	elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
		os_name="linux"
		# Detect Linux distribution
		if [ -f /etc/os-release ]; then
			. /etc/os-release
			case "$ID" in
			ubuntu) distro="ubuntu" ;;
			fedora) distro="fedora" ;;
			arch) distro="arch" ;;
			*) distro="unknown" ;;
			esac
		fi
	else
		os_name="unknown"
	fi

	echo "${os_name}_${distro}"
}

load_config() {
	if [[ -f "$configFile" ]]; then
		source "$configFile"
	fi
}

save_config() {
	cat >"$configFile" <<EOF
# Dotfiles configuration
DOT_NAME="$DOT_NAME"
DOT_EMAIL="$DOT_EMAIL"
DOT_ENVIRONMENT="$DOT_ENVIRONMENT"
DOT_SYSTEM="$DOT_SYSTEM"
EOF
	info "Configuration saved to $configFile"
}

get_available_installations() {
	local installations=()
	for file in "$dotfilesDirectory/script"/*_installation.sh; do
		if [[ -f "$file" ]]; then
			local basename=$(basename "$file" .sh)
			local install_name=${basename%_installation}
			installations+=("$install_name")
		fi
	done
	printf '%s\n' "${installations[@]}"
}

auto_select_installation() {
	local detected=$(detect_system)
	local available_installations=($(get_available_installations))

	# Try exact match first
	for installation in "${available_installations[@]}"; do
		if [[ "$installation" == "$detected" ]]; then
			echo "$installation"
			return
		fi
	done

	# Try partial matches
	local os_part=$(echo "$detected" | cut -d'_' -f1)
	for installation in "${available_installations[@]}"; do
		if [[ "$installation" == *"$os_part"* ]]; then
			echo "$installation"
			return
		fi
	done

	echo ""
}

show_logo() {
	local logo_file="$dotfilesDirectory/art/logo"
	if [[ -f "$logo_file" ]]; then
		echo ""
		# Display logo in blue color
		while IFS= read -r line; do
			printf "${BLUE}%s${RESET}\n" "$line"
		done < "$logo_file"
		echo ""
	fi
}

interactive_setup() {
	show_logo
	header "Dotfiles Setup"

	# Load existing config
	load_config

	# Smart environment detection first
	local detected_system=$(detect_system)
	local auto_installation=$(auto_select_installation)
	local suggested_env="personal"

	# Smart environment detection based on existing git config
	if [[ "$(git config user.email 2>/dev/null)" == *"@labcorp.com" ]]; then
		suggested_env="work"
	fi

	# Single consolidated prompt for all info
	echo ""
	prompt "Name: "
	read input_name
	DOT_NAME="${input_name:-${DOT_NAME:-$DEFAULT_NAME}}"

	prompt "Environment (personal/work) [${suggested_env}]: "
	read env_choice
	env_choice="${env_choice:-$suggested_env}"

	case $env_choice in
	work | Work | w | W | 2)
		DOT_ENVIRONMENT="work"
		DOT_EMAIL="${DOT_EMAIL:-$DEFAULT_EMAIL_WORK}"
		;;
	*)
		DOT_ENVIRONMENT="personal"
		DOT_EMAIL="${DOT_EMAIL:-$DEFAULT_EMAIL_PERSONAL}"
		;;
	esac

	prompt "Email [${DOT_EMAIL}]: "
	read input_email
	DOT_EMAIL="${input_email:-$DOT_EMAIL}"

	# Auto-select installation with work variant
	if [[ -n "$auto_installation" ]]; then
		if [[ "$DOT_ENVIRONMENT" == "work" && -f "$dotfilesDirectory/script/${auto_installation%_*}_work_installation.sh" ]]; then
			auto_installation="${auto_installation%_*}_work"
		fi
		DOT_SYSTEM="$auto_installation"
	else
		DOT_SYSTEM="mac" # fallback
	fi

	# Clean summary
	echo ""
	header "Ready to Install"
	printf "  ${GREEN}Name:${RESET}         %s\n" "$DOT_NAME"
	printf "  ${GREEN}Email:${RESET}        %s\n" "$DOT_EMAIL"
	printf "  ${GREEN}Environment:${RESET}  %s\n" "$DOT_ENVIRONMENT"
	printf "  ${GREEN}System:${RESET}       %s\n" "$DOT_SYSTEM"
	echo ""

	prompt "Continue? [Y/n]: "
	read proceed
	if [[ "$proceed" =~ ^[Nn]$ ]]; then
		echo ""
		info "Setup cancelled"
		exit 0
	fi

	save_config
}

run_installation() {
	local installation_script="$dotfilesDirectory/script/${DOT_SYSTEM}_installation.sh"

	if [[ ! -f "$installation_script" ]]; then
		error "Installation script not found: $installation_script"
		exit 1
	fi

	# Export configuration for use by installation scripts
	export DOT_NAME DOT_EMAIL DOT_ENVIRONMENT DOT_SYSTEM
	export WORK_ENV=""
	if [[ "$DOT_ENVIRONMENT" == "work" ]]; then
		export WORK_ENV="1"
	fi

	info "Running installation: $DOT_SYSTEM"
	exec "$installation_script"
}

displayUsageAndExit() {
	echo "dot -- Enhanced dotfiles management"
	echo ""
	echo "Usage: dot [options]"
	echo ""
	echo "Options:"
	echo "  -i, --install     Interactive installation setup"
	echo "  -l, --list        List available installations"
	echo "  -s, --system      Show current system detection"
	echo "  -c, --config      Show current configuration"
	echo "  --reset-config    Reset configuration file"
	echo "  -e, --edit        Open dotfiles directory for editing"
	echo "  -h, --help        Show this help message and exit"
	echo ""
	echo "Installation Examples:"
	echo "  dot -i                    # Interactive setup"
	echo "  dot --system mac --work   # Direct Mac work installation"
	echo "  dot --system linux_ubuntu # Direct Ubuntu installation"
	exit
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
	case "$1" in
	"-h" | "--help")
		displayUsageAndExit
		;;
	"-e" | "--edit")
		exec "${EDITOR:-code}" "$dotfilesDirectory"
		;;
	"-i" | "--install")
		FORCE_INTERACTIVE=1
		interactive_setup
		run_installation
		exit 0
		;;
	"-l" | "--list")
		info "Available installations:"
		get_available_installations
		exit 0
		;;
	"-s" | "--system")
		local detected=$(detect_system)
		local auto=$(auto_select_installation)
		info "System Detection:"
		echo "  Detected: $detected"
		echo "  Recommended: ${auto:-none}"
		exit 0
		;;
	"-c" | "--config")
		load_config
		info "Current Configuration:"
		echo "  Name: ${DOT_NAME:-not set}"
		echo "  Email: ${DOT_EMAIL:-not set}"
		echo "  Environment: ${DOT_ENVIRONMENT:-not set}"
		echo "  System: ${DOT_SYSTEM:-not set}"
		exit 0
		;;
	"--reset-config")
		rm -f "$configFile"
		info "Configuration reset"
		exit 0
		;;
	"--system")
		shift
		DOT_SYSTEM="$1"
		;;
	"--work")
		DOT_ENVIRONMENT="work"
		;;
	"--personal")
		DOT_ENVIRONMENT="personal"
		;;
	*)
		echo "Invalid option: $1"
		displayUsageAndExit
		;;
	esac
	shift
done

# Default behavior - check if config exists, if not run interactive setup
load_config
if [[ -z "$DOT_SYSTEM" ]] || [[ "$FORCE_INTERACTIVE" == "1" ]]; then
	if [[ "$FORCE_INTERACTIVE" == "1" ]]; then
		info "Running interactive setup..."
	else
		info "No configuration found. Starting interactive setup..."
	fi
	interactive_setup
	run_installation
else
	info "Using existing configuration. Run 'dot -i' for interactive setup or 'dot -c' to view config."
	run_installation
fi
