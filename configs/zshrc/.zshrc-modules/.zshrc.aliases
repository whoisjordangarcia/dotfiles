alias vim="nvim"
alias vi="nvim"
alias reload="source ~/.zshrc"
alias ls="eza --icons"
alias cat="bat"

#arch 
alias hyprc="nvim ~/.config/hypr/hyprland.conf"

#development
alias vimrc="nvim ~/.config/nvim/init.lua"
alias nvim-kickstart='NVIM_APPNAME="nvim-starter" nvim'
alias avante='nvim -c "lua vim.defer_fn(function()require(\"avante.api\").zen_mode()end, 100)"'
alias claude-code='claude'
alias reqrepo-env='~/.zshrc-modules/scripts/activate-reqrepo-env'

# Vim-friendly aliases
alias :q="exit"
alias :wq="exit"
alias :x="exit"
alias zshrc="nvim ~/.zshrc"
alias dotfiles="cd ~/dev/dotfiles && nvim ."

#git
alias gcm="git checkout main"
alias gpo="git pull origin"
alias gc='git checkout'
alias grm="git rebase main"
alias gpf="git push --force-with-lease"

# Git worktree management
wt-auto() {
    local branch=$1
    local base_branch=${2:-develop}
    if [ -z "$branch" ]; then
        echo "Usage: wt-auto <branch-name> [base-branch]"
        echo "  branch-name: Name of the new worktree/branch"
        echo "  base-branch: Base branch to branch from (default: develop)"
        return 1
    fi

    # Sanitize branch name for directory (replace / with -)
    local dir_name=$(echo "$branch" | sed 's/\//-/g')

    git fetch origin
    git worktree add ../$dir_name origin/$branch 2>/dev/null || git worktree add ../$dir_name -b $branch origin/$base_branch

    if [ "$branch" != "$dir_name" ]; then
        echo "Worktree created: ../$dir_name (branch: $branch, based on origin/$base_branch)"
    else
        echo "Worktree created: ../$dir_name (based on origin/$base_branch)"
    fi
}

wt-list() {
    git worktree list
}

wt-remove() {
    local worktree_path=$1
    if [ -z "$worktree_path" ]; then
        echo "Usage: wt-remove <worktree-path>"
        echo "Available worktrees:"
        git worktree list
        return 1
    fi
    git worktree remove "$worktree_path"
}

wt-prune() {
    echo "Checking for stale worktrees..."
    local stale_worktrees=$(git worktree list --porcelain | grep -B2 "prunable" | grep "worktree" | sed 's/worktree //')

    if [ -z "$stale_worktrees" ]; then
        echo "No stale worktrees found."
        return 0
    fi

    echo "Found stale worktrees:"
    echo "$stale_worktrees" | while read -r path; do
        echo "  - $path"
    done

    git worktree prune
    echo "âœ“ Pruned all stale worktree references"
}

# Help function to show all worktree commands
wt-help() {
    echo "Git Worktree Commands:"
    echo "  wt-auto <branch> [base]  - Create worktree from branch or new branch from base"
    echo "  wt-list                  - List all worktrees"
    echo "  wt-remove <path>         - Remove a worktree"
    echo "  wt-prune                 - Remove stale worktree references"
    echo "  wt-help                  - Show this help"
}

# Tab completion for wt- commands
_wt_completion() {
    local commands=(
        "wt-auto:Create worktree from branch or new branch from base"
        "wt-list:List all worktrees"
        "wt-remove:Remove a worktree"
        "wt-prune:Remove stale worktree references"
        "wt-help:Show help for worktree commands"
    )

    _describe 'worktree commands' commands
}

# Register completions
compdef _wt_completion wt-auto wt-list wt-remove wt-prune wt-help
