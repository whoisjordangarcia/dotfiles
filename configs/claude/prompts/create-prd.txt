Create a FOCUSED Product Requirements Document (PRD) for [content-here] 

CRITICAL CONSTRAINTS - READ FIRST:
- Maximum 400 lines for entire PRD
- Focus on WHAT needs to be built and WHY, not HOW to implement
- NO code examples, TypeScript interfaces, or technical implementations
- NO specific API endpoints, URLs, or request/response formats
- NO UI mockups with pixel dimensions (conceptual descriptions only)
- NO database schemas, cache keys, or environment variables
- NO sprint planning, timelines, or week-by-week breakdowns
- NO error code tables or detailed technical specifications

REMEMBER: Other agents in the design phase will handle:
- ui-designer: Creates actual mockups and component hierarchies
- youtube-api-expert: Defines YouTube API integration specifics
- chatgpt-expert: Handles OpenAI integration details
- shadcn-expert: Selects UI components and design systems
- system-architect: Designs technical implementation
- Your role: Define requirements and business logic ONLY

User Journey:
1. User logins using google oauth
2. User adds photo of a model they choose from and upload and select clothing (top, bottom, dress) they want to use on top of the model they choose.
3. User can submit and generate an ai image that merges both the model and clothing that they choose from. AI image generator to use FASHN.ai service, and uses Supabase to upload user images and generates images
4. User can see history of uploaded images and generated images. 
5. User can buy credits using stripe integration, they can buy either tiers for a monthly payment or credits minimum of 50 credits for 10 dollars. adjust tiers accordingly. Each photo generate takes 10 credits.

The app should:
Core Functionality

AI Image generation : Merge the photo of a model and clothing that usaes the Fashn.ai service that helps generate the image:

ALWAYS check latest API documentation before implementation


Buy credits: ability to buy creates using tripe integration 


Sentiment Analysis:

Fetch the top 20-50 most relevant comments (optimize for API quotas)
Send comments batch to OpenAI API (GPT-3.5-turbo for cost efficiency)
Generate an overall sentiment score (1-5 stars)
Provide a brief AI-generated summary of audience reception (2-3 sentences)
Include confidence score for the analysis


history generated images Carousel:

display the uploaded images that the user has generated 


Technical Constraints & Considerations

Uploaded images and generated images stored in Supabase
Buying credits using stripe integration
Only generate imaged are available to the user themselves no one else.
Can't generate images once credits have been used up. 5 credits required per image

Key Requirements to Document (High-Level Only)

Core functionality requirements (what the system must do)
User acceptance criteria (how we know it works)
Business constraints (API quotas, cost considerations)
Success metrics (adoption, performance, quality)

Deployment & Documentation

README with clear setup instructions
.env.template with required API keys
One-click deploy button for Vercel
Docker support (optional, post-MVP)
Troubleshooting guide for common issues

Out of Scope (to avoid over-engineering)

image moderation features
Multi-language
SEO
Analytics tracking 

Please structure the PRD with these FOCUSED sections:
1. Executive Summary (100-150 words): Problem, solution, value proposition
2. User Stories (5-10 stories): User needs with acceptance criteria
3. Functional Requirements (Bullet points): WHAT the system does, not HOW
4. Technical Approach (50-100 words): High-level tech stack only
5. Success Metrics (5-8 metrics): Measurable outcomes
6. Risks & Assumptions (Brief list): Key dependencies and risks

SKIP THESE (other agents will handle):
- Detailed technical architecture → system-architect
- API implementation details → backend-architect 
- UI component specifications → ui-designer
- Code examples or interfaces → implementation agents

IMPORTANT ARCHITECTURE NOTE: This will be hosted in supabase using vervel, See docs/notes.md for detailed architecture rationale. 

FINAL REMINDER - OUTPUT VALIDATION:
✓ If your PRD exceeds 400 lines, you're over-engineering
✓ If you're writing code or API URLs, stop - that's for implementation
✓ If you're creating ASCII mockups, stop - that's for ui-designer
✓ If you're defining cache strategies, stop - that's for backend-architect
✓
